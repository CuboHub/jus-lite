[
  {
    "kind": "page",
    "href": "/apples",
    "path": {
      "full": "/Users/z/personal/jus/test/fixtures/apples.md",
      "relative": "/apples.md",
      "processRelative": "test/fixtures/apples.md",
      "root": "/",
      "dir": "/",
      "base": "apples.md",
      "ext": ".md",
      "name": "apples"
    },
    "stats": {
      "dev": 16777220,
      "mode": 33188,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4096,
      "ino": 3773988,
      "size": 74,
      "blocks": 8,
      "atime": "2015-12-07T03:01:04.000Z",
      "mtime": "2015-12-06T02:38:54.000Z",
      "ctime": "2015-12-06T02:38:54.000Z",
      "birthtime": "2015-08-05T04:35:31.000Z"
    },
    "content": {
      "original": "<!--\ntitle: Apples!\nkeywords: [fruit, doctors]\n-->\n\nHow do you like them?\n",
      "processed": "<meta name=\"title\" content=\"Apples!\"><meta name=\"keywords\" content=\"fruit,doctors\"><!--\ntitle: Apples!\nkeywords: [fruit, doctors]\n-->\n<p>How do you like them?</p>\n"
    },
    "title": "Apples!",
    "keywords": [
      "fruit",
      "doctors"
    ],
    "isDone": true,
    "images": {},
    "data": {}
  },
  {
    "kind": "script",
    "href": "/babel-and-browserify.js",
    "path": {
      "full": "/Users/z/personal/jus/test/fixtures/babel-and-browserify.js",
      "relative": "/babel-and-browserify.js",
      "processRelative": "test/fixtures/babel-and-browserify.js",
      "root": "/",
      "dir": "/",
      "base": "babel-and-browserify.js",
      "ext": ".js",
      "name": "babel-and-browserify"
    },
    "stats": {
      "dev": 16777220,
      "mode": 33188,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4096,
      "ino": 24633345,
      "size": 65,
      "blocks": 8,
      "atime": "2015-12-07T03:01:04.000Z",
      "mtime": "2015-12-07T02:12:03.000Z",
      "ctime": "2015-12-07T02:12:03.000Z",
      "birthtime": "2015-12-06T20:41:19.000Z"
    },
    "content": {
      "original": "const url = require('url')\n\nconsole.log(`I am an ES2015 string`)\n",
      "processed": "(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n(function (global){\n/*! https://mths.be/punycode v1.3.2 by @mathias */\n;(function(root) {\n\n\t/** Detect free variables */\n\tvar freeExports = typeof exports == 'object' && exports &&\n\t\t!exports.nodeType && exports;\n\tvar freeModule = typeof module == 'object' && module &&\n\t\t!module.nodeType && module;\n\tvar freeGlobal = typeof global == 'object' && global;\n\tif (\n\t\tfreeGlobal.global === freeGlobal ||\n\t\tfreeGlobal.window === freeGlobal ||\n\t\tfreeGlobal.self === freeGlobal\n\t) {\n\t\troot = freeGlobal;\n\t}\n\n\t/**\n\t * The `punycode` object.\n\t * @name punycode\n\t * @type Object\n\t */\n\tvar punycode,\n\n\t/** Highest positive signed 32-bit float value */\n\tmaxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1\n\n\t/** Bootstring parameters */\n\tbase = 36,\n\ttMin = 1,\n\ttMax = 26,\n\tskew = 38,\n\tdamp = 700,\n\tinitialBias = 72,\n\tinitialN = 128, // 0x80\n\tdelimiter = '-', // '\\x2D'\n\n\t/** Regular expressions */\n\tregexPunycode = /^xn--/,\n\tregexNonASCII = /[^\\x20-\\x7E]/, // unprintable ASCII chars + non-ASCII chars\n\tregexSeparators = /[\\x2E\\u3002\\uFF0E\\uFF61]/g, // RFC 3490 separators\n\n\t/** Error messages */\n\terrors = {\n\t\t'overflow': 'Overflow: input needs wider integers to process',\n\t\t'not-basic': 'Illegal input >= 0x80 (not a basic code point)',\n\t\t'invalid-input': 'Invalid input'\n\t},\n\n\t/** Convenience shortcuts */\n\tbaseMinusTMin = base - tMin,\n\tfloor = Math.floor,\n\tstringFromCharCode = String.fromCharCode,\n\n\t/** Temporary variable */\n\tkey;\n\n\t/*--------------------------------------------------------------------------*/\n\n\t/**\n\t * A generic error utility function.\n\t * @private\n\t * @param {String} type The error type.\n\t * @returns {Error} Throws a `RangeError` with the applicable error message.\n\t */\n\tfunction error(type) {\n\t\tthrow RangeError(errors[type]);\n\t}\n\n\t/**\n\t * A generic `Array#map` utility function.\n\t * @private\n\t * @param {Array} array The array to iterate over.\n\t * @param {Function} callback The function that gets called for every array\n\t * item.\n\t * @returns {Array} A new array of values returned by the callback function.\n\t */\n\tfunction map(array, fn) {\n\t\tvar length = array.length;\n\t\tvar result = [];\n\t\twhile (length--) {\n\t\t\tresult[length] = fn(array[length]);\n\t\t}\n\t\treturn result;\n\t}\n\n\t/**\n\t * A simple `Array#map`-like wrapper to work with domain name strings or email\n\t * addresses.\n\t * @private\n\t * @param {String} domain The domain name or email address.\n\t * @param {Function} callback The function that gets called for every\n\t * character.\n\t * @returns {Array} A new string of characters returned by the callback\n\t * function.\n\t */\n\tfunction mapDomain(string, fn) {\n\t\tvar parts = string.split('@');\n\t\tvar result = '';\n\t\tif (parts.length > 1) {\n\t\t\t// In email addresses, only the domain name should be punycoded. Leave\n\t\t\t// the local part (i.e. everything up to `@`) intact.\n\t\t\tresult = parts[0] + '@';\n\t\t\tstring = parts[1];\n\t\t}\n\t\t// Avoid `split(regex)` for IE8 compatibility. See #17.\n\t\tstring = string.replace(regexSeparators, '\\x2E');\n\t\tvar labels = string.split('.');\n\t\tvar encoded = map(labels, fn).join('.');\n\t\treturn result + encoded;\n\t}\n\n\t/**\n\t * Creates an array containing the numeric code points of each Unicode\n\t * character in the string. While JavaScript uses UCS-2 internally,\n\t * this function will convert a pair of surrogate halves (each of which\n\t * UCS-2 exposes as separate characters) into a single code point,\n\t * matching UTF-16.\n\t * @see `punycode.ucs2.encode`\n\t * @see <https://mathiasbynens.be/notes/javascript-encoding>\n\t * @memberOf punycode.ucs2\n\t * @name decode\n\t * @param {String} string The Unicode input string (UCS-2).\n\t * @returns {Array} The new array of code points.\n\t */\n\tfunction ucs2decode(string) {\n\t\tvar output = [],\n\t\t    counter = 0,\n\t\t    length = string.length,\n\t\t    value,\n\t\t    extra;\n\t\twhile (counter < length) {\n\t\t\tvalue = string.charCodeAt(counter++);\n\t\t\tif (value >= 0xD800 && value <= 0xDBFF && counter < length) {\n\t\t\t\t// high surrogate, and there is a next character\n\t\t\t\textra = string.charCodeAt(counter++);\n\t\t\t\tif ((extra & 0xFC00) == 0xDC00) { // low surrogate\n\t\t\t\t\toutput.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);\n\t\t\t\t} else {\n\t\t\t\t\t// unmatched surrogate; only append this code unit, in case the next\n\t\t\t\t\t// code unit is the high surrogate of a surrogate pair\n\t\t\t\t\toutput.push(value);\n\t\t\t\t\tcounter--;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\toutput.push(value);\n\t\t\t}\n\t\t}\n\t\treturn output;\n\t}\n\n\t/**\n\t * Creates a string based on an array of numeric code points.\n\t * @see `punycode.ucs2.decode`\n\t * @memberOf punycode.ucs2\n\t * @name encode\n\t * @param {Array} codePoints The array of numeric code points.\n\t * @returns {String} The new Unicode string (UCS-2).\n\t */\n\tfunction ucs2encode(array) {\n\t\treturn map(array, function(value) {\n\t\t\tvar output = '';\n\t\t\tif (value > 0xFFFF) {\n\t\t\t\tvalue -= 0x10000;\n\t\t\t\toutput += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);\n\t\t\t\tvalue = 0xDC00 | value & 0x3FF;\n\t\t\t}\n\t\t\toutput += stringFromCharCode(value);\n\t\t\treturn output;\n\t\t}).join('');\n\t}\n\n\t/**\n\t * Converts a basic code point into a digit/integer.\n\t * @see `digitToBasic()`\n\t * @private\n\t * @param {Number} codePoint The basic numeric code point value.\n\t * @returns {Number} The numeric value of a basic code point (for use in\n\t * representing integers) in the range `0` to `base - 1`, or `base` if\n\t * the code point does not represent a value.\n\t */\n\tfunction basicToDigit(codePoint) {\n\t\tif (codePoint - 48 < 10) {\n\t\t\treturn codePoint - 22;\n\t\t}\n\t\tif (codePoint - 65 < 26) {\n\t\t\treturn codePoint - 65;\n\t\t}\n\t\tif (codePoint - 97 < 26) {\n\t\t\treturn codePoint - 97;\n\t\t}\n\t\treturn base;\n\t}\n\n\t/**\n\t * Converts a digit/integer into a basic code point.\n\t * @see `basicToDigit()`\n\t * @private\n\t * @param {Number} digit The numeric value of a basic code point.\n\t * @returns {Number} The basic code point whose value (when used for\n\t * representing integers) is `digit`, which needs to be in the range\n\t * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is\n\t * used; else, the lowercase form is used. The behavior is undefined\n\t * if `flag` is non-zero and `digit` has no uppercase form.\n\t */\n\tfunction digitToBasic(digit, flag) {\n\t\t//  0..25 map to ASCII a..z or A..Z\n\t\t// 26..35 map to ASCII 0..9\n\t\treturn digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);\n\t}\n\n\t/**\n\t * Bias adaptation function as per section 3.4 of RFC 3492.\n\t * http://tools.ietf.org/html/rfc3492#section-3.4\n\t * @private\n\t */\n\tfunction adapt(delta, numPoints, firstTime) {\n\t\tvar k = 0;\n\t\tdelta = firstTime ? floor(delta / damp) : delta >> 1;\n\t\tdelta += floor(delta / numPoints);\n\t\tfor (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {\n\t\t\tdelta = floor(delta / baseMinusTMin);\n\t\t}\n\t\treturn floor(k + (baseMinusTMin + 1) * delta / (delta + skew));\n\t}\n\n\t/**\n\t * Converts a Punycode string of ASCII-only symbols to a string of Unicode\n\t * symbols.\n\t * @memberOf punycode\n\t * @param {String} input The Punycode string of ASCII-only symbols.\n\t * @returns {String} The resulting string of Unicode symbols.\n\t */\n\tfunction decode(input) {\n\t\t// Don't use UCS-2\n\t\tvar output = [],\n\t\t    inputLength = input.length,\n\t\t    out,\n\t\t    i = 0,\n\t\t    n = initialN,\n\t\t    bias = initialBias,\n\t\t    basic,\n\t\t    j,\n\t\t    index,\n\t\t    oldi,\n\t\t    w,\n\t\t    k,\n\t\t    digit,\n\t\t    t,\n\t\t    /** Cached calculation results */\n\t\t    baseMinusT;\n\n\t\t// Handle the basic code points: let `basic` be the number of input code\n\t\t// points before the last delimiter, or `0` if there is none, then copy\n\t\t// the first basic code points to the output.\n\n\t\tbasic = input.lastIndexOf(delimiter);\n\t\tif (basic < 0) {\n\t\t\tbasic = 0;\n\t\t}\n\n\t\tfor (j = 0; j < basic; ++j) {\n\t\t\t// if it's not a basic code point\n\t\t\tif (input.charCodeAt(j) >= 0x80) {\n\t\t\t\terror('not-basic');\n\t\t\t}\n\t\t\toutput.push(input.charCodeAt(j));\n\t\t}\n\n\t\t// Main decoding loop: start just after the last delimiter if any basic code\n\t\t// points were copied; start at the beginning otherwise.\n\n\t\tfor (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {\n\n\t\t\t// `index` is the index of the next character to be consumed.\n\t\t\t// Decode a generalized variable-length integer into `delta`,\n\t\t\t// which gets added to `i`. The overflow checking is easier\n\t\t\t// if we increase `i` as we go, then subtract off its starting\n\t\t\t// value at the end to obtain `delta`.\n\t\t\tfor (oldi = i, w = 1, k = base; /* no condition */; k += base) {\n\n\t\t\t\tif (index >= inputLength) {\n\t\t\t\t\terror('invalid-input');\n\t\t\t\t}\n\n\t\t\t\tdigit = basicToDigit(input.charCodeAt(index++));\n\n\t\t\t\tif (digit >= base || digit > floor((maxInt - i) / w)) {\n\t\t\t\t\terror('overflow');\n\t\t\t\t}\n\n\t\t\t\ti += digit * w;\n\t\t\t\tt = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\n\t\t\t\tif (digit < t) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tbaseMinusT = base - t;\n\t\t\t\tif (w > floor(maxInt / baseMinusT)) {\n\t\t\t\t\terror('overflow');\n\t\t\t\t}\n\n\t\t\t\tw *= baseMinusT;\n\n\t\t\t}\n\n\t\t\tout = output.length + 1;\n\t\t\tbias = adapt(i - oldi, out, oldi == 0);\n\n\t\t\t// `i` was supposed to wrap around from `out` to `0`,\n\t\t\t// incrementing `n` each time, so we'll fix that now:\n\t\t\tif (floor(i / out) > maxInt - n) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\n\t\t\tn += floor(i / out);\n\t\t\ti %= out;\n\n\t\t\t// Insert `n` at position `i` of the output\n\t\t\toutput.splice(i++, 0, n);\n\n\t\t}\n\n\t\treturn ucs2encode(output);\n\t}\n\n\t/**\n\t * Converts a string of Unicode symbols (e.g. a domain name label) to a\n\t * Punycode string of ASCII-only symbols.\n\t * @memberOf punycode\n\t * @param {String} input The string of Unicode symbols.\n\t * @returns {String} The resulting Punycode string of ASCII-only symbols.\n\t */\n\tfunction encode(input) {\n\t\tvar n,\n\t\t    delta,\n\t\t    handledCPCount,\n\t\t    basicLength,\n\t\t    bias,\n\t\t    j,\n\t\t    m,\n\t\t    q,\n\t\t    k,\n\t\t    t,\n\t\t    currentValue,\n\t\t    output = [],\n\t\t    /** `inputLength` will hold the number of code points in `input`. */\n\t\t    inputLength,\n\t\t    /** Cached calculation results */\n\t\t    handledCPCountPlusOne,\n\t\t    baseMinusT,\n\t\t    qMinusT;\n\n\t\t// Convert the input in UCS-2 to Unicode\n\t\tinput = ucs2decode(input);\n\n\t\t// Cache the length\n\t\tinputLength = input.length;\n\n\t\t// Initialize the state\n\t\tn = initialN;\n\t\tdelta = 0;\n\t\tbias = initialBias;\n\n\t\t// Handle the basic code points\n\t\tfor (j = 0; j < inputLength; ++j) {\n\t\t\tcurrentValue = input[j];\n\t\t\tif (currentValue < 0x80) {\n\t\t\t\toutput.push(stringFromCharCode(currentValue));\n\t\t\t}\n\t\t}\n\n\t\thandledCPCount = basicLength = output.length;\n\n\t\t// `handledCPCount` is the number of code points that have been handled;\n\t\t// `basicLength` is the number of basic code points.\n\n\t\t// Finish the basic string - if it is not empty - with a delimiter\n\t\tif (basicLength) {\n\t\t\toutput.push(delimiter);\n\t\t}\n\n\t\t// Main encoding loop:\n\t\twhile (handledCPCount < inputLength) {\n\n\t\t\t// All non-basic code points < n have been handled already. Find the next\n\t\t\t// larger one:\n\t\t\tfor (m = maxInt, j = 0; j < inputLength; ++j) {\n\t\t\t\tcurrentValue = input[j];\n\t\t\t\tif (currentValue >= n && currentValue < m) {\n\t\t\t\t\tm = currentValue;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,\n\t\t\t// but guard against overflow\n\t\t\thandledCPCountPlusOne = handledCPCount + 1;\n\t\t\tif (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\n\t\t\tdelta += (m - n) * handledCPCountPlusOne;\n\t\t\tn = m;\n\n\t\t\tfor (j = 0; j < inputLength; ++j) {\n\t\t\t\tcurrentValue = input[j];\n\n\t\t\t\tif (currentValue < n && ++delta > maxInt) {\n\t\t\t\t\terror('overflow');\n\t\t\t\t}\n\n\t\t\t\tif (currentValue == n) {\n\t\t\t\t\t// Represent delta as a generalized variable-length integer\n\t\t\t\t\tfor (q = delta, k = base; /* no condition */; k += base) {\n\t\t\t\t\t\tt = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\t\t\t\t\t\tif (q < t) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tqMinusT = q - t;\n\t\t\t\t\t\tbaseMinusT = base - t;\n\t\t\t\t\t\toutput.push(\n\t\t\t\t\t\t\tstringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))\n\t\t\t\t\t\t);\n\t\t\t\t\t\tq = floor(qMinusT / baseMinusT);\n\t\t\t\t\t}\n\n\t\t\t\t\toutput.push(stringFromCharCode(digitToBasic(q, 0)));\n\t\t\t\t\tbias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);\n\t\t\t\t\tdelta = 0;\n\t\t\t\t\t++handledCPCount;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t++delta;\n\t\t\t++n;\n\n\t\t}\n\t\treturn output.join('');\n\t}\n\n\t/**\n\t * Converts a Punycode string representing a domain name or an email address\n\t * to Unicode. Only the Punycoded parts of the input will be converted, i.e.\n\t * it doesn't matter if you call it on a string that has already been\n\t * converted to Unicode.\n\t * @memberOf punycode\n\t * @param {String} input The Punycoded domain name or email address to\n\t * convert to Unicode.\n\t * @returns {String} The Unicode representation of the given Punycode\n\t * string.\n\t */\n\tfunction toUnicode(input) {\n\t\treturn mapDomain(input, function(string) {\n\t\t\treturn regexPunycode.test(string)\n\t\t\t\t? decode(string.slice(4).toLowerCase())\n\t\t\t\t: string;\n\t\t});\n\t}\n\n\t/**\n\t * Converts a Unicode string representing a domain name or an email address to\n\t * Punycode. Only the non-ASCII parts of the domain name will be converted,\n\t * i.e. it doesn't matter if you call it with a domain that's already in\n\t * ASCII.\n\t * @memberOf punycode\n\t * @param {String} input The domain name or email address to convert, as a\n\t * Unicode string.\n\t * @returns {String} The Punycode representation of the given domain name or\n\t * email address.\n\t */\n\tfunction toASCII(input) {\n\t\treturn mapDomain(input, function(string) {\n\t\t\treturn regexNonASCII.test(string)\n\t\t\t\t? 'xn--' + encode(string)\n\t\t\t\t: string;\n\t\t});\n\t}\n\n\t/*--------------------------------------------------------------------------*/\n\n\t/** Define the public API */\n\tpunycode = {\n\t\t/**\n\t\t * A string representing the current Punycode.js version number.\n\t\t * @memberOf punycode\n\t\t * @type String\n\t\t */\n\t\t'version': '1.3.2',\n\t\t/**\n\t\t * An object of methods to convert from JavaScript's internal character\n\t\t * representation (UCS-2) to Unicode code points, and back.\n\t\t * @see <https://mathiasbynens.be/notes/javascript-encoding>\n\t\t * @memberOf punycode\n\t\t * @type Object\n\t\t */\n\t\t'ucs2': {\n\t\t\t'decode': ucs2decode,\n\t\t\t'encode': ucs2encode\n\t\t},\n\t\t'decode': decode,\n\t\t'encode': encode,\n\t\t'toASCII': toASCII,\n\t\t'toUnicode': toUnicode\n\t};\n\n\t/** Expose `punycode` */\n\t// Some AMD build optimizers, like r.js, check for specific condition patterns\n\t// like the following:\n\tif (\n\t\ttypeof define == 'function' &&\n\t\ttypeof define.amd == 'object' &&\n\t\tdefine.amd\n\t) {\n\t\tdefine('punycode', function() {\n\t\t\treturn punycode;\n\t\t});\n\t} else if (freeExports && freeModule) {\n\t\tif (module.exports == freeExports) { // in Node.js or RingoJS v0.8.0+\n\t\t\tfreeModule.exports = punycode;\n\t\t} else { // in Narwhal or RingoJS v0.7.0-\n\t\t\tfor (key in punycode) {\n\t\t\t\tpunycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);\n\t\t\t}\n\t\t}\n\t} else { // in Rhino or a web browser\n\t\troot.punycode = punycode;\n\t}\n\n}(this));\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{}],2:[function(require,module,exports){\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\n// If obj.hasOwnProperty has been overridden, then calling\n// obj.hasOwnProperty(prop) will break.\n// See: https://github.com/joyent/node/issues/1707\nfunction hasOwnProperty(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n\nmodule.exports = function(qs, sep, eq, options) {\n  sep = sep || '&';\n  eq = eq || '=';\n  var obj = {};\n\n  if (typeof qs !== 'string' || qs.length === 0) {\n    return obj;\n  }\n\n  var regexp = /\\+/g;\n  qs = qs.split(sep);\n\n  var maxKeys = 1000;\n  if (options && typeof options.maxKeys === 'number') {\n    maxKeys = options.maxKeys;\n  }\n\n  var len = qs.length;\n  // maxKeys <= 0 means that we should not limit keys count\n  if (maxKeys > 0 && len > maxKeys) {\n    len = maxKeys;\n  }\n\n  for (var i = 0; i < len; ++i) {\n    var x = qs[i].replace(regexp, '%20'),\n        idx = x.indexOf(eq),\n        kstr, vstr, k, v;\n\n    if (idx >= 0) {\n      kstr = x.substr(0, idx);\n      vstr = x.substr(idx + 1);\n    } else {\n      kstr = x;\n      vstr = '';\n    }\n\n    k = decodeURIComponent(kstr);\n    v = decodeURIComponent(vstr);\n\n    if (!hasOwnProperty(obj, k)) {\n      obj[k] = v;\n    } else if (isArray(obj[k])) {\n      obj[k].push(v);\n    } else {\n      obj[k] = [obj[k], v];\n    }\n  }\n\n  return obj;\n};\n\nvar isArray = Array.isArray || function (xs) {\n  return Object.prototype.toString.call(xs) === '[object Array]';\n};\n\n},{}],3:[function(require,module,exports){\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nvar stringifyPrimitive = function(v) {\n  switch (typeof v) {\n    case 'string':\n      return v;\n\n    case 'boolean':\n      return v ? 'true' : 'false';\n\n    case 'number':\n      return isFinite(v) ? v : '';\n\n    default:\n      return '';\n  }\n};\n\nmodule.exports = function(obj, sep, eq, name) {\n  sep = sep || '&';\n  eq = eq || '=';\n  if (obj === null) {\n    obj = undefined;\n  }\n\n  if (typeof obj === 'object') {\n    return map(objectKeys(obj), function(k) {\n      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;\n      if (isArray(obj[k])) {\n        return map(obj[k], function(v) {\n          return ks + encodeURIComponent(stringifyPrimitive(v));\n        }).join(sep);\n      } else {\n        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));\n      }\n    }).join(sep);\n\n  }\n\n  if (!name) return '';\n  return encodeURIComponent(stringifyPrimitive(name)) + eq +\n         encodeURIComponent(stringifyPrimitive(obj));\n};\n\nvar isArray = Array.isArray || function (xs) {\n  return Object.prototype.toString.call(xs) === '[object Array]';\n};\n\nfunction map (xs, f) {\n  if (xs.map) return xs.map(f);\n  var res = [];\n  for (var i = 0; i < xs.length; i++) {\n    res.push(f(xs[i], i));\n  }\n  return res;\n}\n\nvar objectKeys = Object.keys || function (obj) {\n  var res = [];\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) res.push(key);\n  }\n  return res;\n};\n\n},{}],4:[function(require,module,exports){\n'use strict';\n\nexports.decode = exports.parse = require('./decode');\nexports.encode = exports.stringify = require('./encode');\n\n},{\"./decode\":2,\"./encode\":3}],5:[function(require,module,exports){\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nvar punycode = require('punycode');\nvar util = require('./util');\n\nexports.parse = urlParse;\nexports.resolve = urlResolve;\nexports.resolveObject = urlResolveObject;\nexports.format = urlFormat;\n\nexports.Url = Url;\n\nfunction Url() {\n  this.protocol = null;\n  this.slashes = null;\n  this.auth = null;\n  this.host = null;\n  this.port = null;\n  this.hostname = null;\n  this.hash = null;\n  this.search = null;\n  this.query = null;\n  this.pathname = null;\n  this.path = null;\n  this.href = null;\n}\n\n// Reference: RFC 3986, RFC 1808, RFC 2396\n\n// define these here so at least they only have to be\n// compiled once on the first module load.\nvar protocolPattern = /^([a-z0-9.+-]+:)/i,\n    portPattern = /:[0-9]*$/,\n\n    // Special case for a simple path URL\n    simplePathPattern = /^(\\/\\/?(?!\\/)[^\\?\\s]*)(\\?[^\\s]*)?$/,\n\n    // RFC 2396: characters reserved for delimiting URLs.\n    // We actually just auto-escape these.\n    delims = ['<', '>', '\"', '`', ' ', '\\r', '\\n', '\\t'],\n\n    // RFC 2396: characters not allowed for various reasons.\n    unwise = ['{', '}', '|', '\\\\', '^', '`'].concat(delims),\n\n    // Allowed by RFCs, but cause of XSS attacks.  Always escape these.\n    autoEscape = ['\\''].concat(unwise),\n    // Characters that are never ever allowed in a hostname.\n    // Note that any invalid chars are also handled, but these\n    // are the ones that are *expected* to be seen, so we fast-path\n    // them.\n    nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),\n    hostEndingChars = ['/', '?', '#'],\n    hostnameMaxLen = 255,\n    hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,\n    hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,\n    // protocols that can allow \"unsafe\" and \"unwise\" chars.\n    unsafeProtocol = {\n      'javascript': true,\n      'javascript:': true\n    },\n    // protocols that never have a hostname.\n    hostlessProtocol = {\n      'javascript': true,\n      'javascript:': true\n    },\n    // protocols that always contain a // bit.\n    slashedProtocol = {\n      'http': true,\n      'https': true,\n      'ftp': true,\n      'gopher': true,\n      'file': true,\n      'http:': true,\n      'https:': true,\n      'ftp:': true,\n      'gopher:': true,\n      'file:': true\n    },\n    querystring = require('querystring');\n\nfunction urlParse(url, parseQueryString, slashesDenoteHost) {\n  if (url && util.isObject(url) && url instanceof Url) return url;\n\n  var u = new Url;\n  u.parse(url, parseQueryString, slashesDenoteHost);\n  return u;\n}\n\nUrl.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {\n  if (!util.isString(url)) {\n    throw new TypeError(\"Parameter 'url' must be a string, not \" + typeof url);\n  }\n\n  // Copy chrome, IE, opera backslash-handling behavior.\n  // Back slashes before the query string get converted to forward slashes\n  // See: https://code.google.com/p/chromium/issues/detail?id=25916\n  var queryIndex = url.indexOf('?'),\n      splitter =\n          (queryIndex !== -1 && queryIndex < url.indexOf('#')) ? '?' : '#',\n      uSplit = url.split(splitter),\n      slashRegex = /\\\\/g;\n  uSplit[0] = uSplit[0].replace(slashRegex, '/');\n  url = uSplit.join(splitter);\n\n  var rest = url;\n\n  // trim before proceeding.\n  // This is to support parse stuff like \"  http://foo.com  \\n\"\n  rest = rest.trim();\n\n  if (!slashesDenoteHost && url.split('#').length === 1) {\n    // Try fast path regexp\n    var simplePath = simplePathPattern.exec(rest);\n    if (simplePath) {\n      this.path = rest;\n      this.href = rest;\n      this.pathname = simplePath[1];\n      if (simplePath[2]) {\n        this.search = simplePath[2];\n        if (parseQueryString) {\n          this.query = querystring.parse(this.search.substr(1));\n        } else {\n          this.query = this.search.substr(1);\n        }\n      } else if (parseQueryString) {\n        this.search = '';\n        this.query = {};\n      }\n      return this;\n    }\n  }\n\n  var proto = protocolPattern.exec(rest);\n  if (proto) {\n    proto = proto[0];\n    var lowerProto = proto.toLowerCase();\n    this.protocol = lowerProto;\n    rest = rest.substr(proto.length);\n  }\n\n  // figure out if it's got a host\n  // user@server is *always* interpreted as a hostname, and url\n  // resolution will treat //foo/bar as host=foo,path=bar because that's\n  // how the browser resolves relative URLs.\n  if (slashesDenoteHost || proto || rest.match(/^\\/\\/[^@\\/]+@[^@\\/]+/)) {\n    var slashes = rest.substr(0, 2) === '//';\n    if (slashes && !(proto && hostlessProtocol[proto])) {\n      rest = rest.substr(2);\n      this.slashes = true;\n    }\n  }\n\n  if (!hostlessProtocol[proto] &&\n      (slashes || (proto && !slashedProtocol[proto]))) {\n\n    // there's a hostname.\n    // the first instance of /, ?, ;, or # ends the host.\n    //\n    // If there is an @ in the hostname, then non-host chars *are* allowed\n    // to the left of the last @ sign, unless some host-ending character\n    // comes *before* the @-sign.\n    // URLs are obnoxious.\n    //\n    // ex:\n    // http://a@b@c/ => user:a@b host:c\n    // http://a@b?@c => user:a host:c path:/?@c\n\n    // v0.12 TODO(isaacs): This is not quite how Chrome does things.\n    // Review our test case against browsers more comprehensively.\n\n    // find the first instance of any hostEndingChars\n    var hostEnd = -1;\n    for (var i = 0; i < hostEndingChars.length; i++) {\n      var hec = rest.indexOf(hostEndingChars[i]);\n      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))\n        hostEnd = hec;\n    }\n\n    // at this point, either we have an explicit point where the\n    // auth portion cannot go past, or the last @ char is the decider.\n    var auth, atSign;\n    if (hostEnd === -1) {\n      // atSign can be anywhere.\n      atSign = rest.lastIndexOf('@');\n    } else {\n      // atSign must be in auth portion.\n      // http://a@b/c@d => host:b auth:a path:/c@d\n      atSign = rest.lastIndexOf('@', hostEnd);\n    }\n\n    // Now we have a portion which is definitely the auth.\n    // Pull that off.\n    if (atSign !== -1) {\n      auth = rest.slice(0, atSign);\n      rest = rest.slice(atSign + 1);\n      this.auth = decodeURIComponent(auth);\n    }\n\n    // the host is the remaining to the left of the first non-host char\n    hostEnd = -1;\n    for (var i = 0; i < nonHostChars.length; i++) {\n      var hec = rest.indexOf(nonHostChars[i]);\n      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))\n        hostEnd = hec;\n    }\n    // if we still have not hit it, then the entire thing is a host.\n    if (hostEnd === -1)\n      hostEnd = rest.length;\n\n    this.host = rest.slice(0, hostEnd);\n    rest = rest.slice(hostEnd);\n\n    // pull out port.\n    this.parseHost();\n\n    // we've indicated that there is a hostname,\n    // so even if it's empty, it has to be present.\n    this.hostname = this.hostname || '';\n\n    // if hostname begins with [ and ends with ]\n    // assume that it's an IPv6 address.\n    var ipv6Hostname = this.hostname[0] === '[' &&\n        this.hostname[this.hostname.length - 1] === ']';\n\n    // validate a little.\n    if (!ipv6Hostname) {\n      var hostparts = this.hostname.split(/\\./);\n      for (var i = 0, l = hostparts.length; i < l; i++) {\n        var part = hostparts[i];\n        if (!part) continue;\n        if (!part.match(hostnamePartPattern)) {\n          var newpart = '';\n          for (var j = 0, k = part.length; j < k; j++) {\n            if (part.charCodeAt(j) > 127) {\n              // we replace non-ASCII char with a temporary placeholder\n              // we need this to make sure size of hostname is not\n              // broken by replacing non-ASCII by nothing\n              newpart += 'x';\n            } else {\n              newpart += part[j];\n            }\n          }\n          // we test again with ASCII char only\n          if (!newpart.match(hostnamePartPattern)) {\n            var validParts = hostparts.slice(0, i);\n            var notHost = hostparts.slice(i + 1);\n            var bit = part.match(hostnamePartStart);\n            if (bit) {\n              validParts.push(bit[1]);\n              notHost.unshift(bit[2]);\n            }\n            if (notHost.length) {\n              rest = '/' + notHost.join('.') + rest;\n            }\n            this.hostname = validParts.join('.');\n            break;\n          }\n        }\n      }\n    }\n\n    if (this.hostname.length > hostnameMaxLen) {\n      this.hostname = '';\n    } else {\n      // hostnames are always lower case.\n      this.hostname = this.hostname.toLowerCase();\n    }\n\n    if (!ipv6Hostname) {\n      // IDNA Support: Returns a punycoded representation of \"domain\".\n      // It only converts parts of the domain name that\n      // have non-ASCII characters, i.e. it doesn't matter if\n      // you call it with a domain that already is ASCII-only.\n      this.hostname = punycode.toASCII(this.hostname);\n    }\n\n    var p = this.port ? ':' + this.port : '';\n    var h = this.hostname || '';\n    this.host = h + p;\n    this.href += this.host;\n\n    // strip [ and ] from the hostname\n    // the host field still retains them, though\n    if (ipv6Hostname) {\n      this.hostname = this.hostname.substr(1, this.hostname.length - 2);\n      if (rest[0] !== '/') {\n        rest = '/' + rest;\n      }\n    }\n  }\n\n  // now rest is set to the post-host stuff.\n  // chop off any delim chars.\n  if (!unsafeProtocol[lowerProto]) {\n\n    // First, make 100% sure that any \"autoEscape\" chars get\n    // escaped, even if encodeURIComponent doesn't think they\n    // need to be.\n    for (var i = 0, l = autoEscape.length; i < l; i++) {\n      var ae = autoEscape[i];\n      if (rest.indexOf(ae) === -1)\n        continue;\n      var esc = encodeURIComponent(ae);\n      if (esc === ae) {\n        esc = escape(ae);\n      }\n      rest = rest.split(ae).join(esc);\n    }\n  }\n\n\n  // chop off from the tail first.\n  var hash = rest.indexOf('#');\n  if (hash !== -1) {\n    // got a fragment string.\n    this.hash = rest.substr(hash);\n    rest = rest.slice(0, hash);\n  }\n  var qm = rest.indexOf('?');\n  if (qm !== -1) {\n    this.search = rest.substr(qm);\n    this.query = rest.substr(qm + 1);\n    if (parseQueryString) {\n      this.query = querystring.parse(this.query);\n    }\n    rest = rest.slice(0, qm);\n  } else if (parseQueryString) {\n    // no query string, but parseQueryString still requested\n    this.search = '';\n    this.query = {};\n  }\n  if (rest) this.pathname = rest;\n  if (slashedProtocol[lowerProto] &&\n      this.hostname && !this.pathname) {\n    this.pathname = '/';\n  }\n\n  //to support http.request\n  if (this.pathname || this.search) {\n    var p = this.pathname || '';\n    var s = this.search || '';\n    this.path = p + s;\n  }\n\n  // finally, reconstruct the href based on what has been validated.\n  this.href = this.format();\n  return this;\n};\n\n// format a parsed object into a url string\nfunction urlFormat(obj) {\n  // ensure it's an object, and not a string url.\n  // If it's an obj, this is a no-op.\n  // this way, you can call url_format() on strings\n  // to clean up potentially wonky urls.\n  if (util.isString(obj)) obj = urlParse(obj);\n  if (!(obj instanceof Url)) return Url.prototype.format.call(obj);\n  return obj.format();\n}\n\nUrl.prototype.format = function() {\n  var auth = this.auth || '';\n  if (auth) {\n    auth = encodeURIComponent(auth);\n    auth = auth.replace(/%3A/i, ':');\n    auth += '@';\n  }\n\n  var protocol = this.protocol || '',\n      pathname = this.pathname || '',\n      hash = this.hash || '',\n      host = false,\n      query = '';\n\n  if (this.host) {\n    host = auth + this.host;\n  } else if (this.hostname) {\n    host = auth + (this.hostname.indexOf(':') === -1 ?\n        this.hostname :\n        '[' + this.hostname + ']');\n    if (this.port) {\n      host += ':' + this.port;\n    }\n  }\n\n  if (this.query &&\n      util.isObject(this.query) &&\n      Object.keys(this.query).length) {\n    query = querystring.stringify(this.query);\n  }\n\n  var search = this.search || (query && ('?' + query)) || '';\n\n  if (protocol && protocol.substr(-1) !== ':') protocol += ':';\n\n  // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.\n  // unless they had them to begin with.\n  if (this.slashes ||\n      (!protocol || slashedProtocol[protocol]) && host !== false) {\n    host = '//' + (host || '');\n    if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;\n  } else if (!host) {\n    host = '';\n  }\n\n  if (hash && hash.charAt(0) !== '#') hash = '#' + hash;\n  if (search && search.charAt(0) !== '?') search = '?' + search;\n\n  pathname = pathname.replace(/[?#]/g, function(match) {\n    return encodeURIComponent(match);\n  });\n  search = search.replace('#', '%23');\n\n  return protocol + host + pathname + search + hash;\n};\n\nfunction urlResolve(source, relative) {\n  return urlParse(source, false, true).resolve(relative);\n}\n\nUrl.prototype.resolve = function(relative) {\n  return this.resolveObject(urlParse(relative, false, true)).format();\n};\n\nfunction urlResolveObject(source, relative) {\n  if (!source) return relative;\n  return urlParse(source, false, true).resolveObject(relative);\n}\n\nUrl.prototype.resolveObject = function(relative) {\n  if (util.isString(relative)) {\n    var rel = new Url();\n    rel.parse(relative, false, true);\n    relative = rel;\n  }\n\n  var result = new Url();\n  var tkeys = Object.keys(this);\n  for (var tk = 0; tk < tkeys.length; tk++) {\n    var tkey = tkeys[tk];\n    result[tkey] = this[tkey];\n  }\n\n  // hash is always overridden, no matter what.\n  // even href=\"\" will remove it.\n  result.hash = relative.hash;\n\n  // if the relative url is empty, then there's nothing left to do here.\n  if (relative.href === '') {\n    result.href = result.format();\n    return result;\n  }\n\n  // hrefs like //foo/bar always cut to the protocol.\n  if (relative.slashes && !relative.protocol) {\n    // take everything except the protocol from relative\n    var rkeys = Object.keys(relative);\n    for (var rk = 0; rk < rkeys.length; rk++) {\n      var rkey = rkeys[rk];\n      if (rkey !== 'protocol')\n        result[rkey] = relative[rkey];\n    }\n\n    //urlParse appends trailing / to urls like http://www.example.com\n    if (slashedProtocol[result.protocol] &&\n        result.hostname && !result.pathname) {\n      result.path = result.pathname = '/';\n    }\n\n    result.href = result.format();\n    return result;\n  }\n\n  if (relative.protocol && relative.protocol !== result.protocol) {\n    // if it's a known url protocol, then changing\n    // the protocol does weird things\n    // first, if it's not file:, then we MUST have a host,\n    // and if there was a path\n    // to begin with, then we MUST have a path.\n    // if it is file:, then the host is dropped,\n    // because that's known to be hostless.\n    // anything else is assumed to be absolute.\n    if (!slashedProtocol[relative.protocol]) {\n      var keys = Object.keys(relative);\n      for (var v = 0; v < keys.length; v++) {\n        var k = keys[v];\n        result[k] = relative[k];\n      }\n      result.href = result.format();\n      return result;\n    }\n\n    result.protocol = relative.protocol;\n    if (!relative.host && !hostlessProtocol[relative.protocol]) {\n      var relPath = (relative.pathname || '').split('/');\n      while (relPath.length && !(relative.host = relPath.shift()));\n      if (!relative.host) relative.host = '';\n      if (!relative.hostname) relative.hostname = '';\n      if (relPath[0] !== '') relPath.unshift('');\n      if (relPath.length < 2) relPath.unshift('');\n      result.pathname = relPath.join('/');\n    } else {\n      result.pathname = relative.pathname;\n    }\n    result.search = relative.search;\n    result.query = relative.query;\n    result.host = relative.host || '';\n    result.auth = relative.auth;\n    result.hostname = relative.hostname || relative.host;\n    result.port = relative.port;\n    // to support http.request\n    if (result.pathname || result.search) {\n      var p = result.pathname || '';\n      var s = result.search || '';\n      result.path = p + s;\n    }\n    result.slashes = result.slashes || relative.slashes;\n    result.href = result.format();\n    return result;\n  }\n\n  var isSourceAbs = (result.pathname && result.pathname.charAt(0) === '/'),\n      isRelAbs = (\n          relative.host ||\n          relative.pathname && relative.pathname.charAt(0) === '/'\n      ),\n      mustEndAbs = (isRelAbs || isSourceAbs ||\n                    (result.host && relative.pathname)),\n      removeAllDots = mustEndAbs,\n      srcPath = result.pathname && result.pathname.split('/') || [],\n      relPath = relative.pathname && relative.pathname.split('/') || [],\n      psychotic = result.protocol && !slashedProtocol[result.protocol];\n\n  // if the url is a non-slashed url, then relative\n  // links like ../.. should be able\n  // to crawl up to the hostname, as well.  This is strange.\n  // result.protocol has already been set by now.\n  // Later on, put the first path part into the host field.\n  if (psychotic) {\n    result.hostname = '';\n    result.port = null;\n    if (result.host) {\n      if (srcPath[0] === '') srcPath[0] = result.host;\n      else srcPath.unshift(result.host);\n    }\n    result.host = '';\n    if (relative.protocol) {\n      relative.hostname = null;\n      relative.port = null;\n      if (relative.host) {\n        if (relPath[0] === '') relPath[0] = relative.host;\n        else relPath.unshift(relative.host);\n      }\n      relative.host = null;\n    }\n    mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');\n  }\n\n  if (isRelAbs) {\n    // it's absolute.\n    result.host = (relative.host || relative.host === '') ?\n                  relative.host : result.host;\n    result.hostname = (relative.hostname || relative.hostname === '') ?\n                      relative.hostname : result.hostname;\n    result.search = relative.search;\n    result.query = relative.query;\n    srcPath = relPath;\n    // fall through to the dot-handling below.\n  } else if (relPath.length) {\n    // it's relative\n    // throw away the existing file, and take the new path instead.\n    if (!srcPath) srcPath = [];\n    srcPath.pop();\n    srcPath = srcPath.concat(relPath);\n    result.search = relative.search;\n    result.query = relative.query;\n  } else if (!util.isNullOrUndefined(relative.search)) {\n    // just pull out the search.\n    // like href='?foo'.\n    // Put this after the other two cases because it simplifies the booleans\n    if (psychotic) {\n      result.hostname = result.host = srcPath.shift();\n      //occationaly the auth can get stuck only in host\n      //this especially happens in cases like\n      //url.resolveObject('mailto:local1@domain1', 'local2@domain2')\n      var authInHost = result.host && result.host.indexOf('@') > 0 ?\n                       result.host.split('@') : false;\n      if (authInHost) {\n        result.auth = authInHost.shift();\n        result.host = result.hostname = authInHost.shift();\n      }\n    }\n    result.search = relative.search;\n    result.query = relative.query;\n    //to support http.request\n    if (!util.isNull(result.pathname) || !util.isNull(result.search)) {\n      result.path = (result.pathname ? result.pathname : '') +\n                    (result.search ? result.search : '');\n    }\n    result.href = result.format();\n    return result;\n  }\n\n  if (!srcPath.length) {\n    // no path at all.  easy.\n    // we've already handled the other stuff above.\n    result.pathname = null;\n    //to support http.request\n    if (result.search) {\n      result.path = '/' + result.search;\n    } else {\n      result.path = null;\n    }\n    result.href = result.format();\n    return result;\n  }\n\n  // if a url ENDs in . or .., then it must get a trailing slash.\n  // however, if it ends in anything else non-slashy,\n  // then it must NOT get a trailing slash.\n  var last = srcPath.slice(-1)[0];\n  var hasTrailingSlash = (\n      (result.host || relative.host || srcPath.length > 1) &&\n      (last === '.' || last === '..') || last === '');\n\n  // strip single dots, resolve double dots to parent dir\n  // if the path tries to go above the root, `up` ends up > 0\n  var up = 0;\n  for (var i = srcPath.length; i >= 0; i--) {\n    last = srcPath[i];\n    if (last === '.') {\n      srcPath.splice(i, 1);\n    } else if (last === '..') {\n      srcPath.splice(i, 1);\n      up++;\n    } else if (up) {\n      srcPath.splice(i, 1);\n      up--;\n    }\n  }\n\n  // if the path is allowed to go above the root, restore leading ..s\n  if (!mustEndAbs && !removeAllDots) {\n    for (; up--; up) {\n      srcPath.unshift('..');\n    }\n  }\n\n  if (mustEndAbs && srcPath[0] !== '' &&\n      (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {\n    srcPath.unshift('');\n  }\n\n  if (hasTrailingSlash && (srcPath.join('/').substr(-1) !== '/')) {\n    srcPath.push('');\n  }\n\n  var isAbsolute = srcPath[0] === '' ||\n      (srcPath[0] && srcPath[0].charAt(0) === '/');\n\n  // put the host back\n  if (psychotic) {\n    result.hostname = result.host = isAbsolute ? '' :\n                                    srcPath.length ? srcPath.shift() : '';\n    //occationaly the auth can get stuck only in host\n    //this especially happens in cases like\n    //url.resolveObject('mailto:local1@domain1', 'local2@domain2')\n    var authInHost = result.host && result.host.indexOf('@') > 0 ?\n                     result.host.split('@') : false;\n    if (authInHost) {\n      result.auth = authInHost.shift();\n      result.host = result.hostname = authInHost.shift();\n    }\n  }\n\n  mustEndAbs = mustEndAbs || (result.host && srcPath.length);\n\n  if (mustEndAbs && !isAbsolute) {\n    srcPath.unshift('');\n  }\n\n  if (!srcPath.length) {\n    result.pathname = null;\n    result.path = null;\n  } else {\n    result.pathname = srcPath.join('/');\n  }\n\n  //to support request.http\n  if (!util.isNull(result.pathname) || !util.isNull(result.search)) {\n    result.path = (result.pathname ? result.pathname : '') +\n                  (result.search ? result.search : '');\n  }\n  result.auth = relative.auth || result.auth;\n  result.slashes = result.slashes || relative.slashes;\n  result.href = result.format();\n  return result;\n};\n\nUrl.prototype.parseHost = function() {\n  var host = this.host;\n  var port = portPattern.exec(host);\n  if (port) {\n    port = port[0];\n    if (port !== ':') {\n      this.port = port.substr(1);\n    }\n    host = host.substr(0, host.length - port.length);\n  }\n  if (host) this.hostname = host;\n};\n\n},{\"./util\":6,\"punycode\":1,\"querystring\":4}],6:[function(require,module,exports){\n'use strict';\n\nmodule.exports = {\n  isString: function(arg) {\n    return typeof(arg) === 'string';\n  },\n  isObject: function(arg) {\n    return typeof(arg) === 'object' && arg !== null;\n  },\n  isNull: function(arg) {\n    return arg === null;\n  },\n  isNullOrUndefined: function(arg) {\n    return arg == null;\n  }\n};\n\n},{}],7:[function(require,module,exports){\n'use strict';\n\nvar url = require('url');\n\nconsole.log('I am an ES2015 string');\n\n},{\"url\":5}]},{},[7]);\n"
    },
    "isDone": true
  },
  {
    "kind": "page",
    "href": "/",
    "path": {
      "full": "/Users/z/personal/jus/test/fixtures/index.md",
      "relative": "/index.md",
      "processRelative": "test/fixtures/index.md",
      "root": "/",
      "dir": "/",
      "base": "index.md",
      "ext": ".md",
      "name": "index"
    },
    "stats": {
      "dev": 16777220,
      "mode": 33188,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4096,
      "ino": 23200906,
      "size": 24,
      "blocks": 8,
      "atime": "2015-12-07T03:01:04.000Z",
      "mtime": "2015-11-27T05:36:46.000Z",
      "ctime": "2015-11-27T05:36:46.000Z",
      "birthtime": "2015-11-27T05:36:46.000Z"
    },
    "content": {
      "original": "I am the fixtures index\n",
      "processed": "<p>I am the fixtures index</p>\n"
    },
    "title": "Index",
    "isDone": true,
    "images": {},
    "data": {}
  },
  {
    "kind": "page",
    "href": "/oranges",
    "path": {
      "full": "/Users/z/personal/jus/test/fixtures/oranges.html",
      "relative": "/oranges.html",
      "processRelative": "test/fixtures/oranges.html",
      "root": "/",
      "dir": "/",
      "base": "oranges.html",
      "ext": ".html",
      "name": "oranges"
    },
    "stats": {
      "dev": 16777220,
      "mode": 33188,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4096,
      "ino": 3773990,
      "size": 54,
      "blocks": 8,
      "atime": "2015-12-07T03:01:04.000Z",
      "mtime": "2015-08-06T04:23:00.000Z",
      "ctime": "2015-08-06T04:23:00.000Z",
      "birthtime": "2015-08-05T04:35:40.000Z"
    },
    "content": {
      "original": "<title>We are Oranges</title>\nNothing rhymes with us.\n",
      "processed": "<title>We are Oranges</title>\nNothing rhymes with us.\n"
    },
    "title": "We are Oranges",
    "isDone": true,
    "images": {},
    "data": {}
  },
  {
    "kind": "stylesheet",
    "href": "/styles-sass.css",
    "path": {
      "full": "/Users/z/personal/jus/test/fixtures/styles-sass.sass",
      "relative": "/styles-sass.sass",
      "processRelative": "test/fixtures/styles-sass.sass",
      "root": "/",
      "dir": "/",
      "base": "styles-sass.sass",
      "ext": ".sass",
      "name": "styles-sass"
    },
    "stats": {
      "dev": 16777220,
      "mode": 33188,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4096,
      "ino": 24612223,
      "size": 42,
      "blocks": 8,
      "atime": "2015-12-07T03:01:04.000Z",
      "mtime": "2015-12-06T19:12:07.000Z",
      "ctime": "2015-12-06T19:12:07.000Z",
      "birthtime": "2015-12-06T19:11:47.000Z"
    },
    "content": {
      "original": "$color: yellow\n\nbody\n  background: $color\n",
      "processed": "body {\n  background: yellow; }\n"
    },
    "isDone": true
  },
  {
    "kind": "stylesheet",
    "href": "/styles-stylus.css",
    "path": {
      "full": "/Users/z/personal/jus/test/fixtures/styles-stylus.styl",
      "relative": "/styles-stylus.styl",
      "processRelative": "test/fixtures/styles-stylus.styl",
      "root": "/",
      "dir": "/",
      "base": "styles-stylus.styl",
      "ext": ".styl",
      "name": "styles-stylus"
    },
    "stats": {
      "dev": 16777220,
      "mode": 33188,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4096,
      "ino": 24622562,
      "size": 37,
      "blocks": 8,
      "atime": "2015-12-07T03:01:04.000Z",
      "mtime": "2015-12-06T20:09:19.000Z",
      "ctime": "2015-12-06T20:09:19.000Z",
      "birthtime": "2015-12-06T20:08:37.000Z"
    },
    "content": {
      "original": "color = red\n\nbody\n  background color\n",
      "processed": "body {\n  background: #f00;\n}\n"
    },
    "isDone": true
  },
  {
    "kind": "stylesheet",
    "href": "/styles.css",
    "path": {
      "full": "/Users/z/personal/jus/test/fixtures/styles.scss",
      "relative": "/styles.scss",
      "processRelative": "test/fixtures/styles.scss",
      "root": "/",
      "dir": "/",
      "base": "styles.scss",
      "ext": ".scss",
      "name": "styles"
    },
    "stats": {
      "dev": 16777220,
      "mode": 33188,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4096,
      "ino": 24602929,
      "size": 47,
      "blocks": 8,
      "atime": "2015-12-07T03:01:04.000Z",
      "mtime": "2015-12-07T02:22:26.000Z",
      "ctime": "2015-12-07T02:22:26.000Z",
      "birthtime": "2015-12-06T06:46:03.000Z"
    },
    "content": {
      "original": "$color: green;\n\nbody {\n  background: $color;\n}\n",
      "processed": "body {\n  background: green; }\n"
    },
    "isDone": true
  },
  {
    "kind": "script",
    "href": "/other/banana.js",
    "path": {
      "full": "/Users/z/personal/jus/test/fixtures/other/banana.js",
      "relative": "/other/banana.js",
      "processRelative": "test/fixtures/other/banana.js",
      "root": "/",
      "dir": "/other",
      "base": "banana.js",
      "ext": ".js",
      "name": "banana"
    },
    "stats": {
      "dev": 16777220,
      "mode": 33188,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4096,
      "ino": 21547286,
      "size": 36,
      "blocks": 8,
      "atime": "2015-12-07T03:01:04.000Z",
      "mtime": "2015-11-17T02:44:58.000Z",
      "ctime": "2015-11-17T02:44:58.000Z",
      "birthtime": "2015-11-17T02:44:34.000Z"
    },
    "content": {
      "original": "console.log('hello from banana.js')\n",
      "processed": "(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n'use strict';\n\nconsole.log('hello from banana.js');\n\n},{}]},{},[1]);\n"
    },
    "isDone": true
  },
  {
    "kind": "image",
    "href": "/other/guava.png",
    "path": {
      "full": "/Users/z/personal/jus/test/fixtures/other/guava.png",
      "relative": "/other/guava.png",
      "processRelative": "test/fixtures/other/guava.png",
      "root": "/",
      "dir": "/other",
      "base": "guava.png",
      "ext": ".png",
      "name": "guava"
    },
    "stats": {
      "dev": 16777220,
      "mode": 33188,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4096,
      "ino": 21547208,
      "size": 1264961,
      "blocks": 2472,
      "atime": "2015-12-07T03:01:04.000Z",
      "mtime": "2015-11-17T02:43:34.000Z",
      "ctime": "2015-11-17T02:43:44.000Z",
      "birthtime": "2015-11-17T02:43:34.000Z"
    },
    "title": "guava",
    "dimensions": {
      "width": 1094,
      "height": 1080,
      "type": "png"
    },
    "colors": [
      "#df9f77",
      "#fbfbfb",
      "#e25554",
      "#987a2f",
      "#778150"
    ],
    "isDone": true
  },
  {
    "kind": "page",
    "href": "/other/UPPERCASE",
    "path": {
      "full": "/Users/z/personal/jus/test/fixtures/other/UPPERCASE.HTML",
      "relative": "/other/UPPERCASE.HTML",
      "processRelative": "test/fixtures/other/UPPERCASE.HTML",
      "root": "/",
      "dir": "/other",
      "base": "UPPERCASE.HTML",
      "ext": ".HTML",
      "name": "UPPERCASE"
    },
    "stats": {
      "dev": 16777220,
      "mode": 33188,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4096,
      "ino": 3775416,
      "size": 14,
      "blocks": 8,
      "atime": "2015-12-07T03:01:04.000Z",
      "mtime": "2015-08-05T05:18:45.000Z",
      "ctime": "2015-08-05T05:18:45.000Z",
      "birthtime": "2015-08-05T05:18:17.000Z"
    },
    "content": {
      "original": "I am so loud.\n",
      "processed": "I am so loud.\n"
    },
    "title": "UPPERCASE",
    "isDone": true,
    "images": {
      "guava": {
        "kind": "image",
        "href": "/other/guava.png",
        "path": {
          "full": "/Users/z/personal/jus/test/fixtures/other/guava.png",
          "relative": "/other/guava.png",
          "processRelative": "test/fixtures/other/guava.png",
          "root": "/",
          "dir": "/other",
          "base": "guava.png",
          "ext": ".png",
          "name": "guava"
        },
        "stats": {
          "dev": 16777220,
          "mode": 33188,
          "nlink": 1,
          "uid": 501,
          "gid": 20,
          "rdev": 0,
          "blksize": 4096,
          "ino": 21547208,
          "size": 1264961,
          "blocks": 2472,
          "atime": "2015-12-07T03:01:04.000Z",
          "mtime": "2015-11-17T02:43:34.000Z",
          "ctime": "2015-11-17T02:43:44.000Z",
          "birthtime": "2015-11-17T02:43:34.000Z"
        },
        "title": "guava",
        "dimensions": {
          "width": 1094,
          "height": 1080,
          "type": "png"
        },
        "colors": [
          "#df9f77",
          "#fbfbfb",
          "#e25554",
          "#987a2f",
          "#778150"
        ],
        "isDone": true
      }
    },
    "data": {}
  },
  {
    "kind": "page",
    "href": "/other",
    "path": {
      "full": "/Users/z/personal/jus/test/fixtures/other/index.md",
      "relative": "/other/index.md",
      "processRelative": "test/fixtures/other/index.md",
      "root": "/",
      "dir": "/other",
      "base": "index.md",
      "ext": ".md",
      "name": "index"
    },
    "stats": {
      "dev": 16777220,
      "mode": 33188,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4096,
      "ino": 3774010,
      "size": 557,
      "blocks": 8,
      "atime": "2015-12-07T03:01:04.000Z",
      "mtime": "2015-12-06T03:00:14.000Z",
      "ctime": "2015-12-06T03:00:14.000Z",
      "birthtime": "2015-08-05T04:36:14.000Z"
    },
    "content": {
      "original": "I am the other index.\n\nWhen jus runs, it should update the relative paths, but not the absolute ones.\n\n## things with href\n\n- absolute: <a href=\"http://mango.com\">mango.com</a>\n- protocol-relative: <a href=\"//coconut-cdn.com\">coconut-cdn.com</a>\n- relative: <a href=\"papayas\">papayas</a>\n- relative with leading slash: <a href=\"/grapes\">grapes</a>\n\n## things with src\n\n- absolute: <img src=\"https://guava.com/logo.png\">\n- protocol-relative: <img src=\"//guava-relative.com/logo.png\">\n- relative: <img src=\"guava.png\">\n- script, too: <script src=\"banana.js\">\n",
      "processed": "<p>I am the other index.</p>\n<p>When jus runs, it should update the relative paths, but not the absolute ones.</p>\n<h2 id=\"things-with-href\" class=\"deep-link\"><a href=\"/other/#things-with-href\">things with href</a></h2>\n<ul>\n<li>absolute: <a href=\"http://mango.com\">mango.com</a></li>\n<li>protocol-relative: <a href=\"//coconut-cdn.com\">coconut-cdn.com</a></li>\n<li>relative: <a href=\"/other/papayas\">papayas</a></li>\n<li>relative with leading slash: <a href=\"/other/grapes\">grapes</a></li>\n</ul>\n<h2 id=\"things-with-src\" class=\"deep-link\"><a href=\"/other/#things-with-src\">things with src</a></h2>\n<ul>\n<li>absolute: <img src=\"https://guava.com/logo.png\"></li>\n<li>protocol-relative: <img src=\"//guava-relative.com/logo.png\"></li>\n<li>relative: <img src=\"/other/guava.png\"></li>\n<li>script, too: <script src=\"/other/banana.js\"></li>\n</ul>\n</script></li></ul>"
    },
    "title": "Index",
    "isDone": true,
    "images": {
      "guava": {
        "kind": "image",
        "href": "/other/guava.png",
        "path": {
          "full": "/Users/z/personal/jus/test/fixtures/other/guava.png",
          "relative": "/other/guava.png",
          "processRelative": "test/fixtures/other/guava.png",
          "root": "/",
          "dir": "/other",
          "base": "guava.png",
          "ext": ".png",
          "name": "guava"
        },
        "stats": {
          "dev": 16777220,
          "mode": 33188,
          "nlink": 1,
          "uid": 501,
          "gid": 20,
          "rdev": 0,
          "blksize": 4096,
          "ino": 21547208,
          "size": 1264961,
          "blocks": 2472,
          "atime": "2015-12-07T03:01:04.000Z",
          "mtime": "2015-11-17T02:43:34.000Z",
          "ctime": "2015-11-17T02:43:44.000Z",
          "birthtime": "2015-11-17T02:43:34.000Z"
        },
        "title": "guava",
        "dimensions": {
          "width": 1094,
          "height": 1080,
          "type": "png"
        },
        "colors": [
          "#df9f77",
          "#fbfbfb",
          "#e25554",
          "#987a2f",
          "#778150"
        ],
        "isDone": true
      }
    },
    "data": {}
  },
  {
    "kind": "page",
    "href": "/other/papayas",
    "path": {
      "full": "/Users/z/personal/jus/test/fixtures/other/papayas.markdown",
      "relative": "/other/papayas.markdown",
      "processRelative": "test/fixtures/other/papayas.markdown",
      "root": "/",
      "dir": "/other",
      "base": "papayas.markdown",
      "ext": ".markdown",
      "name": "papayas"
    },
    "stats": {
      "dev": 16777220,
      "mode": 33188,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4096,
      "ino": 3774007,
      "size": 111,
      "blocks": 8,
      "atime": "2015-12-07T03:01:04.000Z",
      "mtime": "2015-08-06T04:24:58.000Z",
      "ctime": "2015-08-06T04:24:58.000Z",
      "birthtime": "2015-08-05T04:36:09.000Z"
    },
    "content": {
      "original": "<!--\nkeywords: [fruit, tropical]\n-->\n\nWe contain enzymes that aid in human [digestion](https://digestion.com).\n",
      "processed": "<meta name=\"keywords\" content=\"fruit,tropical\"><!--\nkeywords: [fruit, tropical]\n-->\n<p>We contain enzymes that aid in human <a href=\"https://digestion.com\">digestion</a>.</p>\n"
    },
    "keywords": [
      "fruit",
      "tropical"
    ],
    "title": "Papayas",
    "isDone": true,
    "images": {
      "guava": {
        "kind": "image",
        "href": "/other/guava.png",
        "path": {
          "full": "/Users/z/personal/jus/test/fixtures/other/guava.png",
          "relative": "/other/guava.png",
          "processRelative": "test/fixtures/other/guava.png",
          "root": "/",
          "dir": "/other",
          "base": "guava.png",
          "ext": ".png",
          "name": "guava"
        },
        "stats": {
          "dev": 16777220,
          "mode": 33188,
          "nlink": 1,
          "uid": 501,
          "gid": 20,
          "rdev": 0,
          "blksize": 4096,
          "ino": 21547208,
          "size": 1264961,
          "blocks": 2472,
          "atime": "2015-12-07T03:01:04.000Z",
          "mtime": "2015-11-17T02:43:34.000Z",
          "ctime": "2015-11-17T02:43:44.000Z",
          "birthtime": "2015-11-17T02:43:34.000Z"
        },
        "title": "guava",
        "dimensions": {
          "width": 1094,
          "height": 1080,
          "type": "png"
        },
        "colors": [
          "#df9f77",
          "#fbfbfb",
          "#e25554",
          "#987a2f",
          "#778150"
        ],
        "isDone": true
      }
    },
    "data": {}
  },
  {
    "kind": "page",
    "href": "/thumbs",
    "path": {
      "full": "/Users/z/personal/jus/test/fixtures/thumbs/index.html",
      "relative": "/thumbs/index.html",
      "processRelative": "test/fixtures/thumbs/index.html",
      "root": "/",
      "dir": "/thumbs",
      "base": "index.html",
      "ext": ".html",
      "name": "index"
    },
    "stats": {
      "dev": 16777220,
      "mode": 33188,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4096,
      "ino": 23200909,
      "size": 234,
      "blocks": 8,
      "atime": "2015-12-07T03:01:04.000Z",
      "mtime": "2015-12-06T05:30:04.000Z",
      "ctime": "2015-12-06T05:30:04.000Z",
      "birthtime": "2015-11-27T05:36:46.000Z"
    },
    "content": {
      "original": "I am the thumbs index.\n\nHere comes a reference\n\nHis name is {{page.data.some_json_data.name}}\n\nAnother character is {{page.data.some_yml_data.name}}\n\nPages:\n\n<ul>\n  {{#each pages}}\n    <li class=\"page\">{{href}}</li>\n  {{/each}}\n</ul>\n",
      "processed": "I am the thumbs index.\n\nHere comes a reference\n\nHis name is cookie monster\n\nAnother character is Bert\n\nPages:\n\n<ul>\n    <li class=\"page\">/apples</li>\n    <li class=\"page\">/</li>\n    <li class=\"page\">/oranges</li>\n    <li class=\"page\">/other/UPPERCASE</li>\n    <li class=\"page\">/other</li>\n    <li class=\"page\">/other/papayas</li>\n    <li class=\"page\">/thumbs</li>\n    <li class=\"page\">/other/nested/coconut</li>\n    <li class=\"page\">/thumbs/gif</li>\n    <li class=\"page\">/thumbs/png</li>\n    <li class=\"page\">/thumbs/jpg</li>\n    <li class=\"page\">/thumbs/svg</li>\n</ul>\n"
    },
    "title": "Index",
    "isDone": true,
    "images": {},
    "data": {
      "some_json_data": {
        "name": "cookie monster",
        "food": "cookies"
      },
      "some_yml_data": {
        "name": "Bert",
        "friend": "Ernie"
      }
    }
  },
  {
    "kind": "dataFile",
    "href": "/thumbs/some_json_data.json",
    "path": {
      "full": "/Users/z/personal/jus/test/fixtures/thumbs/some_json_data.json",
      "relative": "/thumbs/some_json_data.json",
      "processRelative": "test/fixtures/thumbs/some_json_data.json",
      "root": "/",
      "dir": "/thumbs",
      "base": "some_json_data.json",
      "ext": ".json",
      "name": "some_json_data"
    },
    "stats": {
      "dev": 16777220,
      "mode": 33188,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4096,
      "ino": 23200910,
      "size": 52,
      "blocks": 8,
      "atime": "2015-12-07T03:01:04.000Z",
      "mtime": "2015-11-27T05:36:46.000Z",
      "ctime": "2015-11-27T05:36:46.000Z",
      "birthtime": "2015-11-27T05:36:46.000Z"
    },
    "title": "some_json_data",
    "data": {
      "name": "cookie monster",
      "food": "cookies"
    },
    "isDone": true
  },
  {
    "kind": "dataFile",
    "href": "/thumbs/some_yml_data.yml",
    "path": {
      "full": "/Users/z/personal/jus/test/fixtures/thumbs/some_yml_data.yml",
      "relative": "/thumbs/some_yml_data.yml",
      "processRelative": "test/fixtures/thumbs/some_yml_data.yml",
      "root": "/",
      "dir": "/thumbs",
      "base": "some_yml_data.yml",
      "ext": ".yml",
      "name": "some_yml_data"
    },
    "stats": {
      "dev": 16777220,
      "mode": 33188,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4096,
      "ino": 23200911,
      "size": 25,
      "blocks": 8,
      "atime": "2015-12-07T03:01:04.000Z",
      "mtime": "2015-11-27T05:36:46.000Z",
      "ctime": "2015-11-27T05:36:46.000Z",
      "birthtime": "2015-11-27T05:36:46.000Z"
    },
    "title": "some_yml_data",
    "data": {
      "name": "Bert",
      "friend": "Ernie"
    },
    "isDone": true
  },
  {
    "kind": "page",
    "href": "/other/nested/coconut",
    "path": {
      "full": "/Users/z/personal/jus/test/fixtures/other/nested/coconut.md",
      "relative": "/other/nested/coconut.md",
      "processRelative": "test/fixtures/other/nested/coconut.md",
      "root": "/",
      "dir": "/other/nested",
      "base": "coconut.md",
      "ext": ".md",
      "name": "coconut"
    },
    "stats": {
      "dev": 16777220,
      "mode": 33188,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4096,
      "ino": 23200908,
      "size": 6,
      "blocks": 8,
      "atime": "2015-12-07T03:01:04.000Z",
      "mtime": "2015-11-27T05:36:46.000Z",
      "ctime": "2015-11-27T05:36:46.000Z",
      "birthtime": "2015-11-27T05:36:46.000Z"
    },
    "content": {
      "original": "hello\n",
      "processed": "<p>hello</p>\n"
    },
    "title": "Coconut",
    "isDone": true,
    "images": {},
    "data": {}
  },
  {
    "kind": "page",
    "href": "/thumbs/gif",
    "path": {
      "full": "/Users/z/personal/jus/test/fixtures/thumbs/gif/index.md",
      "relative": "/thumbs/gif/index.md",
      "processRelative": "test/fixtures/thumbs/gif/index.md",
      "root": "/",
      "dir": "/thumbs/gif",
      "base": "index.md",
      "ext": ".md",
      "name": "index"
    },
    "stats": {
      "dev": 16777220,
      "mode": 33188,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4096,
      "ino": 3871472,
      "size": 0,
      "blocks": 0,
      "atime": "2015-12-07T03:01:04.000Z",
      "mtime": "2015-08-13T03:15:14.000Z",
      "ctime": "2015-08-13T03:15:14.000Z",
      "birthtime": "2015-08-13T03:15:14.000Z"
    },
    "content": {
      "original": "",
      "processed": ""
    },
    "title": "Index",
    "isDone": true,
    "images": {
      "thumb": {
        "kind": "image",
        "href": "/thumbs/gif/thumb.gif",
        "path": {
          "full": "/Users/z/personal/jus/test/fixtures/thumbs/gif/thumb.gif",
          "relative": "/thumbs/gif/thumb.gif",
          "processRelative": "test/fixtures/thumbs/gif/thumb.gif",
          "root": "/",
          "dir": "/thumbs/gif",
          "base": "thumb.gif",
          "ext": ".gif",
          "name": "thumb"
        },
        "stats": {
          "dev": 16777220,
          "mode": 33184,
          "nlink": 1,
          "uid": 501,
          "gid": 20,
          "rdev": 0,
          "blksize": 4096,
          "ino": 18333433,
          "size": 4269,
          "blocks": 16,
          "atime": "2015-12-07T03:01:04.000Z",
          "mtime": "2015-10-29T02:28:41.000Z",
          "ctime": "2015-10-29T02:29:12.000Z",
          "birthtime": "2015-10-29T02:28:41.000Z"
        },
        "title": "thumb",
        "dimensions": {
          "width": 200,
          "height": 200,
          "type": "gif"
        },
        "colors": [
          "#f27494",
          "#98723e",
          "#fcf6f7",
          "#b38e5c",
          "#f4acc4"
        ],
        "isDone": true
      }
    },
    "data": {}
  },
  {
    "kind": "image",
    "href": "/thumbs/gif/thumb.gif",
    "path": {
      "full": "/Users/z/personal/jus/test/fixtures/thumbs/gif/thumb.gif",
      "relative": "/thumbs/gif/thumb.gif",
      "processRelative": "test/fixtures/thumbs/gif/thumb.gif",
      "root": "/",
      "dir": "/thumbs/gif",
      "base": "thumb.gif",
      "ext": ".gif",
      "name": "thumb"
    },
    "stats": {
      "dev": 16777220,
      "mode": 33184,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4096,
      "ino": 18333433,
      "size": 4269,
      "blocks": 16,
      "atime": "2015-12-07T03:01:04.000Z",
      "mtime": "2015-10-29T02:28:41.000Z",
      "ctime": "2015-10-29T02:29:12.000Z",
      "birthtime": "2015-10-29T02:28:41.000Z"
    },
    "title": "thumb",
    "dimensions": {
      "width": 200,
      "height": 200,
      "type": "gif"
    },
    "colors": [
      "#f27494",
      "#98723e",
      "#fcf6f7",
      "#b38e5c",
      "#f4acc4"
    ],
    "isDone": true
  },
  {
    "kind": "page",
    "href": "/thumbs/jpg",
    "path": {
      "full": "/Users/z/personal/jus/test/fixtures/thumbs/jpg/index.html",
      "relative": "/thumbs/jpg/index.html",
      "processRelative": "test/fixtures/thumbs/jpg/index.html",
      "root": "/",
      "dir": "/thumbs/jpg",
      "base": "index.html",
      "ext": ".html",
      "name": "index"
    },
    "stats": {
      "dev": 16777220,
      "mode": 33188,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4096,
      "ino": 3871485,
      "size": 0,
      "blocks": 0,
      "atime": "2015-12-07T03:01:04.000Z",
      "mtime": "2015-08-13T03:15:40.000Z",
      "ctime": "2015-08-13T03:15:40.000Z",
      "birthtime": "2015-08-13T03:15:40.000Z"
    },
    "content": {
      "original": "",
      "processed": ""
    },
    "title": "Index",
    "isDone": true,
    "images": {
      "thumb": {
        "kind": "image",
        "href": "/thumbs/jpg/thumb.jpg",
        "path": {
          "full": "/Users/z/personal/jus/test/fixtures/thumbs/jpg/thumb.jpg",
          "relative": "/thumbs/jpg/thumb.jpg",
          "processRelative": "test/fixtures/thumbs/jpg/thumb.jpg",
          "root": "/",
          "dir": "/thumbs/jpg",
          "base": "thumb.jpg",
          "ext": ".jpg",
          "name": "thumb"
        },
        "stats": {
          "dev": 16777220,
          "mode": 33188,
          "nlink": 1,
          "uid": 501,
          "gid": 20,
          "rdev": 0,
          "blksize": 4096,
          "ino": 18332267,
          "size": 6690,
          "blocks": 16,
          "atime": "2015-12-07T03:01:04.000Z",
          "mtime": "2015-10-29T02:24:27.000Z",
          "ctime": "2015-10-29T02:24:32.000Z",
          "birthtime": "2015-10-29T02:24:27.000Z"
        },
        "title": "thumb",
        "dimensions": {
          "height": 170,
          "width": 170,
          "type": "jpg"
        },
        "exif": {
          "startMarker": {
            "offset": 0
          },
          "tags": {},
          "imageSize": {
            "height": 170,
            "width": 170
          }
        },
        "colors": [
          "#909a3f",
          "#e0e4dd",
          "#443615",
          "#d3d78d",
          "#44540c"
        ],
        "isDone": true
      }
    },
    "data": {}
  },
  {
    "kind": "image",
    "href": "/thumbs/jpg/thumb.jpg",
    "path": {
      "full": "/Users/z/personal/jus/test/fixtures/thumbs/jpg/thumb.jpg",
      "relative": "/thumbs/jpg/thumb.jpg",
      "processRelative": "test/fixtures/thumbs/jpg/thumb.jpg",
      "root": "/",
      "dir": "/thumbs/jpg",
      "base": "thumb.jpg",
      "ext": ".jpg",
      "name": "thumb"
    },
    "stats": {
      "dev": 16777220,
      "mode": 33188,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4096,
      "ino": 18332267,
      "size": 6690,
      "blocks": 16,
      "atime": "2015-12-07T03:01:04.000Z",
      "mtime": "2015-10-29T02:24:27.000Z",
      "ctime": "2015-10-29T02:24:32.000Z",
      "birthtime": "2015-10-29T02:24:27.000Z"
    },
    "title": "thumb",
    "dimensions": {
      "height": 170,
      "width": 170,
      "type": "jpg"
    },
    "exif": {
      "startMarker": {
        "offset": 0
      },
      "tags": {},
      "imageSize": {
        "height": 170,
        "width": 170
      }
    },
    "colors": [
      "#909a3f",
      "#e0e4dd",
      "#443615",
      "#d3d78d",
      "#44540c"
    ],
    "isDone": true
  },
  {
    "kind": "page",
    "href": "/thumbs/png",
    "path": {
      "full": "/Users/z/personal/jus/test/fixtures/thumbs/png/index.md",
      "relative": "/thumbs/png/index.md",
      "processRelative": "test/fixtures/thumbs/png/index.md",
      "root": "/",
      "dir": "/thumbs/png",
      "base": "index.md",
      "ext": ".md",
      "name": "index"
    },
    "stats": {
      "dev": 16777220,
      "mode": 33188,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4096,
      "ino": 3870942,
      "size": 0,
      "blocks": 0,
      "atime": "2015-12-07T03:01:04.000Z",
      "mtime": "2015-08-13T02:20:40.000Z",
      "ctime": "2015-08-13T02:20:40.000Z",
      "birthtime": "2015-08-13T02:20:40.000Z"
    },
    "content": {
      "original": "",
      "processed": ""
    },
    "title": "Index",
    "isDone": true,
    "images": {
      "thumb": {
        "kind": "image",
        "href": "/thumbs/png/thumb.png",
        "path": {
          "full": "/Users/z/personal/jus/test/fixtures/thumbs/png/thumb.png",
          "relative": "/thumbs/png/thumb.png",
          "processRelative": "test/fixtures/thumbs/png/thumb.png",
          "root": "/",
          "dir": "/thumbs/png",
          "base": "thumb.png",
          "ext": ".png",
          "name": "thumb"
        },
        "stats": {
          "dev": 16777220,
          "mode": 33188,
          "nlink": 1,
          "uid": 501,
          "gid": 20,
          "rdev": 0,
          "blksize": 4096,
          "ino": 18331027,
          "size": 121957,
          "blocks": 240,
          "atime": "2015-12-07T03:01:04.000Z",
          "mtime": "2015-10-29T02:18:38.000Z",
          "ctime": "2015-10-29T02:18:46.000Z",
          "birthtime": "2015-10-29T02:18:38.000Z"
        },
        "title": "thumb",
        "dimensions": {
          "width": 501,
          "height": 198,
          "type": "png"
        },
        "colors": [
          "#762c29",
          "#1f1b1c",
          "#b4cdbe",
          "#e6412e",
          "#758fa8"
        ],
        "isDone": true
      }
    },
    "data": {}
  },
  {
    "kind": "image",
    "href": "/thumbs/png/thumb.png",
    "path": {
      "full": "/Users/z/personal/jus/test/fixtures/thumbs/png/thumb.png",
      "relative": "/thumbs/png/thumb.png",
      "processRelative": "test/fixtures/thumbs/png/thumb.png",
      "root": "/",
      "dir": "/thumbs/png",
      "base": "thumb.png",
      "ext": ".png",
      "name": "thumb"
    },
    "stats": {
      "dev": 16777220,
      "mode": 33188,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4096,
      "ino": 18331027,
      "size": 121957,
      "blocks": 240,
      "atime": "2015-12-07T03:01:04.000Z",
      "mtime": "2015-10-29T02:18:38.000Z",
      "ctime": "2015-10-29T02:18:46.000Z",
      "birthtime": "2015-10-29T02:18:38.000Z"
    },
    "title": "thumb",
    "dimensions": {
      "width": 501,
      "height": 198,
      "type": "png"
    },
    "colors": [
      "#762c29",
      "#1f1b1c",
      "#b4cdbe",
      "#e6412e",
      "#758fa8"
    ],
    "isDone": true
  },
  {
    "kind": "page",
    "href": "/thumbs/svg",
    "path": {
      "full": "/Users/z/personal/jus/test/fixtures/thumbs/svg/index.md",
      "relative": "/thumbs/svg/index.md",
      "processRelative": "test/fixtures/thumbs/svg/index.md",
      "root": "/",
      "dir": "/thumbs/svg",
      "base": "index.md",
      "ext": ".md",
      "name": "index"
    },
    "stats": {
      "dev": 16777220,
      "mode": 33188,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4096,
      "ino": 3871354,
      "size": 0,
      "blocks": 0,
      "atime": "2015-12-07T03:01:04.000Z",
      "mtime": "2015-08-13T03:07:58.000Z",
      "ctime": "2015-08-13T03:07:58.000Z",
      "birthtime": "2015-08-13T03:07:58.000Z"
    },
    "content": {
      "original": "",
      "processed": ""
    },
    "title": "Index",
    "isDone": true,
    "images": {
      "thumbnail": {
        "kind": "image",
        "href": "/thumbs/svg/thumbnail.svg",
        "path": {
          "full": "/Users/z/personal/jus/test/fixtures/thumbs/svg/thumbnail.svg",
          "relative": "/thumbs/svg/thumbnail.svg",
          "processRelative": "test/fixtures/thumbs/svg/thumbnail.svg",
          "root": "/",
          "dir": "/thumbs/svg",
          "base": "thumbnail.svg",
          "ext": ".svg",
          "name": "thumbnail"
        },
        "stats": {
          "dev": 16777220,
          "mode": 33188,
          "nlink": 1,
          "uid": 501,
          "gid": 20,
          "rdev": 0,
          "blksize": 4096,
          "ino": 3870950,
          "size": 29346,
          "blocks": 64,
          "atime": "2015-12-07T03:01:04.000Z",
          "mtime": "2015-11-13T04:41:44.000Z",
          "ctime": "2015-11-13T04:41:44.000Z",
          "birthtime": "2015-08-13T02:21:10.000Z"
        },
        "title": "thumbnail",
        "dimensions": {
          "width": 81,
          "height": 49,
          "type": "svg"
        },
        "colors": [
          "#ccaaff",
          "#ffcc00",
          "#ff6600",
          "#ff7f2a",
          "#ff0000",
          "#ff8080",
          "#ff8080",
          "#fc6a6b",
          "#005500",
          "#00aa00",
          "#008000",
          "#501616",
          "#a02c2c",
          "#782121",
          "#2b0000",
          "#552200",
          "#552200",
          "#552200",
          "#552200",
          "#552200",
          "#552200",
          "#552200",
          "#552200",
          "#552200",
          "#552200",
          "#552200",
          "#aa8800",
          "#aa8800",
          "#aa8800",
          "#000000",
          "#000000",
          "#803300",
          "#000000",
          "#803300",
          "#000000",
          "#800000",
          "#000000",
          "#000000",
          "#800000",
          "#000000",
          "#000000",
          "#000000",
          "#000000",
          "#000000",
          "#000000",
          "#000000",
          "#000000",
          "#000000",
          "#000000",
          "#803300",
          "#803300",
          "#803300",
          "#803300",
          "#803300",
          "#803300",
          "#803300",
          "#803300",
          "#803300",
          "#803300",
          "#803300",
          "#000000",
          "#000000",
          "#000000"
        ],
        "isDone": true
      }
    },
    "data": {}
  },
  {
    "kind": "image",
    "href": "/thumbs/svg/thumbnail.svg",
    "path": {
      "full": "/Users/z/personal/jus/test/fixtures/thumbs/svg/thumbnail.svg",
      "relative": "/thumbs/svg/thumbnail.svg",
      "processRelative": "test/fixtures/thumbs/svg/thumbnail.svg",
      "root": "/",
      "dir": "/thumbs/svg",
      "base": "thumbnail.svg",
      "ext": ".svg",
      "name": "thumbnail"
    },
    "stats": {
      "dev": 16777220,
      "mode": 33188,
      "nlink": 1,
      "uid": 501,
      "gid": 20,
      "rdev": 0,
      "blksize": 4096,
      "ino": 3870950,
      "size": 29346,
      "blocks": 64,
      "atime": "2015-12-07T03:01:04.000Z",
      "mtime": "2015-11-13T04:41:44.000Z",
      "ctime": "2015-11-13T04:41:44.000Z",
      "birthtime": "2015-08-13T02:21:10.000Z"
    },
    "title": "thumbnail",
    "dimensions": {
      "width": 81,
      "height": 49,
      "type": "svg"
    },
    "colors": [
      "#ccaaff",
      "#ffcc00",
      "#ff6600",
      "#ff7f2a",
      "#ff0000",
      "#ff8080",
      "#ff8080",
      "#fc6a6b",
      "#005500",
      "#00aa00",
      "#008000",
      "#501616",
      "#a02c2c",
      "#782121",
      "#2b0000",
      "#552200",
      "#552200",
      "#552200",
      "#552200",
      "#552200",
      "#552200",
      "#552200",
      "#552200",
      "#552200",
      "#552200",
      "#552200",
      "#aa8800",
      "#aa8800",
      "#aa8800",
      "#000000",
      "#000000",
      "#803300",
      "#000000",
      "#803300",
      "#000000",
      "#800000",
      "#000000",
      "#000000",
      "#800000",
      "#000000",
      "#000000",
      "#000000",
      "#000000",
      "#000000",
      "#000000",
      "#000000",
      "#000000",
      "#000000",
      "#000000",
      "#803300",
      "#803300",
      "#803300",
      "#803300",
      "#803300",
      "#803300",
      "#803300",
      "#803300",
      "#803300",
      "#803300",
      "#803300",
      "#000000",
      "#000000",
      "#000000"
    ],
    "isDone": true
  }
]